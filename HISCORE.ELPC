#output "hiscore"

clr

'--------
.declares
'--------
#declare k, hs_name$(3), hs_score(3), hs_level$(3), a$
#declare tx, ty, chr, addr, x, y, vl, xx, yy, z, c$, tclr
#declare idx, lvl_clr(3), cidx, rainbow_flag
#declare default_hs_red&(32), default_hs_green&(32), default_hs_blue&(32)
#declare tmr, ch, score$
#declare cursor_tmr, cursor_tx, cursor_state, b$, name$, tmp

.music_vars
'----------
#define chunk_max = 50
#declare chunk_cnt, chunk_idx, vidx, tmpo%, row
#declare echo_m, echo_b, echo_sz = .05, chunk_rpt, echo_delay
#declare v$(5,chunk_max), v
#declare song$
#declare v1$, v2$, v3$, v4$, v5$, v6$
#declare curr_freq, curr_dir

#declare seqcnt
#declare seq_chunk(200), seq_extra(200)

#declare plyptr, plyflag, ret%, tmp$, playidx%

#declare attack, decay, sustain, release, waveform, pw


'-------
.defines
'-------
#define KEY_ESCAPE = chr$(27)
#define PLOT_PIXEL = $7f27
#define KEY_DEL = "{x14}"
#define KEY_RETURN = chr$(13)

#define CMD_LOOP = -3


'----
.main
'----
  gosub init

  gosub load_current_high_scores

  gosub check_if_new_high_score

  gosub draw_hiscore_title

  gosub draw_hiscore_list

  tmr = ti
  do
    get a$
    if a$ = "q" then exit
    if a$ <> "" then begin
      gosub restore_default_hs_colours
      print chr$(147);
      bank 0 : poke $1600, asc("z"), asc("z") : bank 128
      dload "seamlib"
    bend

    if ti - tmr > .1 then gosub cycle_hs_colours: tmr = ti

    gosub parse_current_seqptr

  loop

  end


'-----------------------
.check_if_new_high_score
'-----------------------
  if peek($1600) = asc("h") and peek($1601) = asc("s") then begin
    poke $1600, 0, 0
    idx = peek($1602)
    a$ = ""
    k = 0
    do
      ch = peek($1603 + k)
      if ch = 0 then exit
      a$ = a$ + chr$(ch)
      k = k + 1
    loop

    k = fre(1)

    score$ = a$
    
    tx = 0 : ty = 0 : tclr = -1
    a$ = "Congratulations!"
    gosub plot_centred_text

    ty = ty + 12 : tclr = -1
    a$ = "New High Score!"
    gosub plot_centred_text

    tx = 0 : ty = ty + 20 : tclr = lvl_clr(idx)
    a$ = hs_level$(idx) + ": " + score$
    gosub plot_centred_text

    tx = 0 : ty = ty + 20 : tclr = 12
    a$ = "Enter your name:"
    gosub plot_text

    tmr = ti
    cursor_tmr = ti - 1
    cursor_tx = 0
    ty = ty + 8
    cursor_state = 0
    do
      gosub handle_cursor

      if (ti - tmr) > .1 then begin
        gosub cycle_hs_colours
        tmr = ti
      bend

      gosub handle_name_input

      if a$ = KEY_RETURN and name$<>"" then exit
    loop

    print chr$(147);
    hs_name$(idx) = name$
    hs_score(idx) = val(score$)

    gosub save_hiscores

    dload "hiscore"
  bend

  return


'-----------------
.handle_name_input
'-----------------
  get a$
  if (a$ >= "a" and a$ <= "z") or (a$ >= "A" and a$ <= "Z") or a$=" " then begin
    if len(name$) < 12 then begin
      cursor_state = 0
      gosub draw_cursor
      tx = cursor_tx
      tclr = cursor_tx / 8 + $40
      gosub plot_text
      cursor_tx = cursor_tx + 8
      cursor_tmr = ti - 1
      name$ = name$ + a$
    bend
  bend

  if a$ = KEY_DEL and cursor_tx > 0 then begin
    cursor_state = 0
    gosub draw_cursor
    cursor_tx = cursor_tx - 8
    gosub draw_cursor
    cursor_tmr = ti - 1
    name$ = left$(name$, len(name$) - 1)
  bend

  gosub parse_current_seqptr

  return


'-------------
.handle_cursor
'-------------
  if (ti - cursor_tmr) > .5 then begin
    cursor_tmr = ti
    if cursor_state = 0 then begin
      cursor_state = 1
    bend: else begin
      cursor_state = 0
    bend
    gosub draw_cursor
  bend
  return


'-----------
.draw_cursor
'-----------
  b$ = "    "
  if cursor_state = 1 then b$ = "{x12}" + b$ : else b$ = "{x92}" + b$
  x = cursor_tx / 2
  y = ty / 2
  color cursor_tx / 8 + 16
  for k = 0 to 3
    cursor x, y + k
    print b$;
  next k
  return


'----------------
.cycle_hs_colours
'----------------
  bank 0
  sys $7f21, $01 * 16, 16
  bank 128
  return


'----
.init
'----
  print chr$(147);
  z = fre(1)

  poke $d021, 0
  poke $d020, 0

  gosub store_default_hs_colours

  bank 0
  bload "asmhelper"
  bank 128

  song$ = "flight.p"
  gosub load_song

  hs_level$(0) = "Extreme"
  hs_level$(1) = "Difficult"
  hs_level$(2) = "Medium"
  hs_level$(3) = "Easy"

  lvl_clr(0) = 2
  lvl_clr(1) = 7
  lvl_clr(2) = 5
  lvl_clr(3) = 6

  return


'------------------------
.load_current_high_scores
'------------------------
  dopen #2, "scores", r, u8

  for k = 0 to 3
    input #2, hs_name$(k)
    input #2, hs_score(k)
  next k

  dclose #2
  return


'-------------
.save_hiscores
'-------------
  delete "scores"
  dopen #2, "scores", w, u8

  for k = 0 to 3
    print #2, hs_name$(k)
    print #2, hs_score(k)
  next k

  dclose #2
  return


'------------------
.draw_hiscore_title
'------------------
  tx = 0 : ty = 2 : tclr = -1
  a$ = "HIGH SCORES"
  gosub plot_centred_text
  return


'-----------------
.plot_centred_text
'-----------------
  tx = (160 - len(a$)*8) / 2
  gosub plot_text
  return


'---------
.plot_text
'---------
  rainbow_flag = 0
  if tclr = -1 then rainbow_flag = 1

  for k = 0 to len(a$) - 1
    c$ = mid$(a$, k + 1, 1)
    chr = asc(c$)
    
    gosub petscii_to_screencode

    if rainbow_flag=1 then tclr = cidx + $40 : cidx = mod(cidx + 1, 16)

    gosub plot_chr
    tx = tx + 8
  next k

  z = fre(1)

  return


'--------
.plot_chr
'--------
  addr = $2d800 + chr * 8

  for yy = 0 to 7

    vl = peek(addr)

    addr = addr + 1

    y = ty + yy
    x = tx

    bank 0
    for xx = 7 to 0 step -1
      if (vl and (2 ^ xx)) <> 0 then sys PLOT_PIXEL, x, y, tclr
      x = x + 1
    next xx
    bank 128

  next yy

  gosub parse_current_seqptr

  return


'---------------------
.petscii_to_screencode
'---------------------
  bank 0
  poke $7e2a, chr
  sys $7f2a
  chr = peek($7e2a)
  bank 128
  return


'-----------------
.draw_hiscore_list
'-----------------
  'for k = 0 to 3
  '  print hs_level$(k) ; ": "; hs_name$(k); " - score: "; hs_score(k)
  'next k

  z = fre(1)
  ty = 14
  for idx = 0 to 3
    tx = 0
    tclr = lvl_clr(idx)
    a$ = hs_level$(idx) + ":"
    gosub plot_text

    ty = ty + 8
    tx = 8
    tclr = -1
    a$ = hs_name$(idx)
    gosub plot_text

    tclr = lvl_clr(idx)
    a$ = str$(hs_score(idx))
    tx = 160 - len(a$) * 8
    gosub plot_text

    ty = ty + 12
  next idx

  color 10
  print "{x92}";
  a$ = "Press any key to exit high score menu"
  cursor (80 - len(a$)) / 2, 48
  a$ = chr$(15) + a$ + chr$(143)
  print a$;

  return


'-------------------------
.store_default_hs_colours
'-------------------------
  for k = 0 to 15
    default_hs_red&(k) = peek($d110+k)
    default_hs_green&(k) = peek($d210+k)
    default_hs_blue&(k) = peek($d310+k)
  next k

  return


'-----------------------
.restore_default_hs_colours
'-----------------------
  for k = 0 to 15
    poke $d110+k, default_hs_red&(k)
    poke $d210+k, default_hs_green&(k)
    poke $d310+k, default_hs_blue&(k)
  next k

  return


'---------
.load_song
'---------
  dopen #2,(song$),r,u8

  ' load melody chunks
  ' ------------------
  input #2, chunk_cnt
  for chunk_idx = 0 to chunk_cnt - 1
    for vidx=0 to 5
      input #2,v$(vidx, chunk_idx)
    next vidx
  next chunk_idx

  input #2,tmpo%

  tempo tmpo%
  
  ' load envelopes
  ' --------------
  for row = 0 to 9
    input #2, tmp$
    input #2, attack
    input #2, decay
    input #2, sustain
    input #2, release
    input #2, waveform
    input #2, pw

    envelope row, attack, decay, sustain, release, waveform, pw
  next row
  print

  ' load filter presets
  ' -------------------
  for row = 0 to 10
    input #2, tmp$
    input #2, tmp
    input #2, tmp
    input #2, tmp
    input #2, tmp
    input #2, tmp
    input #2, tmp
    input #2, tmp
    input #2, tmp
  next row

  ' load sequence
  ' -------------
  seqcnt = 0
  input #2, seqcnt
  row = 0
  do while row < seqcnt
    input #2, seq_chunk(row)
    input #2, seq_extra(row)
    row = row + 1
  loop


  dclose #2

  chunk_idx = 0
  return


'--------------------
.parse_current_seqptr
'--------------------
  ret% = 0
  if plyptr = -1 then ret%=1:return
  if rplay(1)<>0 then ret%=1:return

  k = seq_chunk(plyptr)
  
  if k >= 0 then begin
    chunk_idx = k
    if chunk_rpt <= 0 then chunk_rpt = seq_extra(plyptr)
    gosub play_chunk_idx
    playidx% = playidx% + 1
    ret% = 1
  bend

  plyptr = plyptr + 1

  if k = CMD_LOOP then plyptr = 0

  if plyptr >= seqcnt then plyflag = 0 : plyptr = -1
  return


'--------------
.play_chunk_idx
'--------------
  play v$(0, chunk_idx), v$(1, chunk_idx), v$(2, chunk_idx), {x5F}
       v$(3, chunk_idx), v$(4, chunk_idx), v$(5, chunk_idx)
  return
ÿ