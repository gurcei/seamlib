#output "palette"


'--------
.declares
'--------
#declare bkp_d054&, bkp_d058&, bkp_d059&, bkp_d05e&
#declare k, a$, x, y, cx, cy, cursor_clr
#declare cursor_state, tx, ty, tclr, chr, cidx
#declare red, green, blue, red$, green$, blue$
#declare sel_idx, idx, rev_flag, sel_val
#declare alt_key, clip_red, clip_green, clip_blue
#declare sel_val$, mod_flag, ln$, my_err$
#declare start_red, start_green, start_blue, start_idx
#declare end_red, end_green, end_blue, end_idx
#declare stp, cnt


'-------
.defines
'-------
#define KEY_ESCAPE = chr$(27)
#define WIDTH = 200

#define OP_COPY = 0
#define OP_MIX  = 1
#define OP_SWAP = 2
#define OP_FILL = 3

#define KEY_UP = "{x91}"
#define KEY_DOWN = "{x11}"
#define KEY_LEFT = "{x9D}"
#define KEY_RIGHT = "{x1D}"

#define KEY_F1 = "{x85}"
#define KEY_F3 = "{x86}"
#define KEY_F4 = "{x8A}"
#define KEY_F5 = "{x87}"
#define KEY_F7 = "{x88}"
#define KEY_F8 = "{x8C}"
#define KEY_ESC = chr$(27)
#define KEY_REV_ON = "{x12}"
#define KEY_REV_OFF = "{x92}"
#define KEY_RETURN = chr$(13)
#define KEY_MEGA_Q = "«"
#define KEY_MEGA_C = "¼"
#define KEY_MEGA_V = "¾"
#define KEY_DEL = "{x14}"

' cursor states
#define STATE_SELECT   = 0
#define STATE_EDIT     = 1
#define STATE_GRADIENT = 2
#define STATE_EXIT     = 3


trap runstop_trapper

'----
.main
'----
  gosub init

  gosub clrscreen

  gosub draw_palette

  gosub parse_input

  goto cleanup
  end


'----
.init
'----
  bank 128
  key off

  print "{x93}";KEY_ESCAPE;"5";
  
  bkp_d054& = peek($d054)
  bkp_d058& = peek($d058)
  bkp_d059& = peek($d059)
  bkp_d05e& = peek($d05e)

  ' set SEAM mode CHR16 + FCLRHI
  setbit $d054, 0
  setbit $d054, 2

  wpoke $d058, WIDTH
  poke $d05e, WIDTH / 2

  poke $d021, 14
  poke $d020, 0

  ' $1000 = solid fcm char
  for k = 0 to 63
    poke $40000 + k, $ff
  next k

  ' $1001 = box char
  for k = 0 to 63
    if int(k / 8) = 0 or int(k / 8) = 7 then poke $40040 + k, $ff:goto nxt
    if mod(k, 8) = 0 or mod(k, 8) = 7 then poke $40040 + k, $ff:goto nxt
    poke $40040 + k, $00
.nxt
  next k

  return


'---------------
.runstop_trapper
'---------------
  ' if er<>30 then resume  ' ignore everything except run/stop

  my_err$ = "?" + err$(er) + " in line " + str$(el)

.cleanup
  print "{x93}";my_err$
  trap
  poke $d054, bkp_d054&
  poke $d058, bkp_d058&
  poke $d059, bkp_d059&
  poke $d05e, bkp_d05e&

  end


'---------
.clrscreen
'---------
  edma OP_FILL, WIDTH * 50, 32, $40800
  edma OP_FILL, WIDTH * 50, 0, $ff80000

  ' clear screen
  for y = 0 to 49
   for x = 0 to 79
     poke $40800 + y * WIDTH + x * 2 + 1, 0
   next x
  next y


  return


'------------
.draw_palette
'------------
  ' draw x-index
  for x = 0 to 15
    if x < 10 then wpoke $40800 + x * 2 + 2, $30 + x
    if x >= 10 then wpoke $40800 + x * 2 + 2, x - 9
    wpoke $ff80000 + x * 2 + 2, 0 * 256
  next x

  ' draw y-index
  for y = 0 to 15
    if y < 10 then wpoke $40800 + (y+1) * WIDTH, $30 + y
    if y >= 10 then wpoke $40800 + (y+1) * WIDTH, y - 9
    wpoke $ff80000 + (y+1) * WIDTH, 0 * 256
  next y

  ' draw blocks for each colour
  for y = 1 to 16
    for x = 1 to 16
      wpoke $40800 + y * WIDTH + x * 2, $1000
      wpoke $ff80000 + y * WIDTH + x * 2, ((y-1) * 16 + (x - 1)) * 256
    next x
  next y
  return


'-----------
.parse_input
'-----------
  do while 1
    if cursor_state = STATE_SELECT then gosub state_select
    if cursor_state = STATE_EDIT then gosub state_edit
    if cursor_state = STATE_EXIT then goto cleanup : end
  loop
  return


'------------
.state_select
'------------
  sel_idx = -1 : gosub draw_rgb_values

  do while 1
    gosub draw_cursor

    get a$

    if a$ = KEY_RIGHT then begin
      cx = cx + 1
      if cx = 16 then begin
        cx = 15
        if cy < 15 then cy = cy + 1 : cx = 0
      bend
      sel_idx = -1 : gosub draw_rgb_values
    bend

    if a$ = KEY_LEFT then begin
      cx = cx - 1
      if cx = -1 then begin
        cx = 0
        if cy > 0 then cy = cy - 1 : cx = 15
      bend
      sel_idx = -1 : gosub draw_rgb_values
    bend

    if a$ = KEY_UP and cy > 0 then cy = cy - 1 : sel_idx = -1 : gosub draw_rgb_values
    if a$ = KEY_DOWN and cy < 15 then cy = cy + 1 : sel_idx = -1 : gosub draw_rgb_values
    if a$ = KEY_RETURN then cursor_state = STATE_EDIT : exit

    ' mega-q = exit
    if a$ = KEY_MEGA_Q then begin
      tclr = 0 : tx = 20 : ty = 3 : a$ = "quit: are you sure? (y/n)"
      gosub draw_text

      get key a$
      if a$="y" then key on : goto cleanup : else begin
        tclr = 0 : tx = 20 : ty = 3 : a$ = "                         "
        gosub draw_text
      bend
    bend

    if a$ = KEY_MEGA_C then begin
      clip_red = red
      clip_green = green
      clip_blue = blue
    bend

    if a$ = KEY_MEGA_V then begin
      poke $d100 + cidx, clip_red
      poke $d200 + cidx, clip_green
      poke $d300 + cidx, clip_blue
      sel_idx = -1 : gosub draw_rgb_values
    bend

    if a$ = KEY_F1 then gosub load_palette
    if a$ = KEY_F3 then gosub save_palette

    if a$ = "g" then begin
      if cursor_state = STATE_SELECT then begin
        cursor_state = STATE_GRADIENT
        start_red = (red >> 4) + (red and $0f) * 16
        start_green = (green >> 4) + (green and $0f) * 16
        start_blue = (blue >> 4) + (blue and $0f) * 16
        start_idx = cidx
      bend : else begin
        cursor_state = STATE_SELECT
        end_red = (red >> 4) + (red and $0f) * 16
        end_green = (green >> 4) + (green and $0f) * 16
        end_blue = (blue >> 4) + (blue and $0f) * 16
        end_idx = cidx
        gosub create_gradient
        bend
      bend
    bend

    cursor_clr = mod(cursor_clr + 1, 16)
  loop
  return


'---------------
.create_gradient
'---------------
  stp = 1
  if end_idx < start_idx then stp = -1
  cnt = abs(end_idx - start_idx)

  for k = 0 to cnt
    red = start_red + k * (end_red - start_red) / cnt
    green = start_green + k * (end_green - start_green) / cnt
    blue = start_blue + k * (end_blue - start_blue) / cnt

    red = (red >> 4) + (red and $0f) * 16
    green = (green >> 4) + (green and $0f) * 16
    blue = (blue >> 4) + (blue and $0f) * 16

    poke $d100 + start_idx + stp * k, red
    poke $d200 + start_idx + stp * k, green
    poke $d300 + start_idx + stp * k, blue
  next k

  return


'------------
.load_palette
'------------
  tclr = 0 : tx = 20 : ty = 3 : a$ = "load name: "
  gosub draw_text

  gosub seam_input

  tx = 20 : a$ = "                          "
  gosub draw_text

  if len(ln$) > 0 then begin
    bload (ln$),p($ffd3100)
    sel_idx = -1 : gosub draw_rgb_values
  bend
  
  return


'------------
.save_palette
'------------
  tclr = 0 : tx = 20 : ty = 3 : a$ = "save name: "
  gosub draw_text

  gosub seam_input

  tx = 20 : a$ = "                          "
  gosub draw_text

  if len(ln$) > 0 then begin
    delete (ln$)
    bsave (ln$),p($ffd3100) to p($ffd3400)
  bend

  return


'----------
.seam_input
'----------
  ln$ = ""
  do while 1

    tclr = 0 : tx = 31 : ty = 3
    a$ = ln$ + KEY_REV_ON + " " + KEY_REV_OFF + " "
    gosub draw_text

    get key a$
    if (a$ >= "a" and a$ <= "z") or (a$ >= "0" and a$ <= "9") or a$="." then begin
      ln$ = ln$ + a$
    bend

    if a$ = KEY_DEL then begin
      if len(ln$) > 0 then ln$ = left$(ln$, len(ln$) - 1)
    bend

    if a$ = KEY_RETURN then exit
  loop

  return


'----------
.state_edit
'----------
  sel_idx = 0

  do while 1
    gosub draw_rgb_values

.skipse
    get key a$
    alt_key = peek($d611) and 16
    if a$ = KEY_DOWN then sel_idx = mod(sel_idx + 1, 3)
    if a$ = KEY_UP then sel_idx = mod(sel_idx + 3 - 1, 3)
    if a$ = KEY_MEGA_Q or a$ = KEY_ESCAPE or a$ = KEY_RETURN then cursor_state = STATE_SELECT : gosub clear_edit : exit
    if a$ = KEY_RIGHT then gosub incr_value
    if a$ = KEY_LEFT then gosub decr_value
    
    gosub check_modify
    if mod_flag = 1 then goto skipse
  loop

  return


'------------
.check_modify
'------------
  mod_flag = 0
  if a$ = KEY_DEL then begin
    if sel_idx = 0 then sel_val$ = red$
    if sel_idx = 1 then sel_val$ = green$
    if sel_idx = 2 then sel_val$ = blue$
    
    if len(sel_val$) > 0 then sel_val$ = left$(sel_val$,len(sel_val$)-1)

    sel_val = dec(sel_val$)
    sel_val = (sel_val and $0f) * 16 + (sel_val >> 4)

    if sel_idx = 0 then red$ = sel_val$ : poke $d100 + cidx, sel_val
    if sel_idx = 1 then green$ = sel_val$ : poke $d200 + cidx, sel_val
    if sel_idx = 2 then blue$ = sel_val$ : poke $d300 + cidx, sel_val

    gosub draw_rgb_text
    mod_flag = 1
  bend

  if (a$ >= "0" and a$ <= "9") or (a$ >= "a" and a$ <= "f") then begin

    if sel_idx = 0 then sel_val$ = red$
    if sel_idx = 1 then sel_val$ = green$
    if sel_idx = 2 then sel_val$ = blue$

    if len(sel_val$) = 2 then sel_val$ = a$ : goto skipcm
    if len(sel_val$) = 1 then sel_val$ = sel_val$ + a$ : goto skipcm
    if len(sel_val$) = 0 then sel_val$ = a$ : goto skipcm

.skipcm
    sel_val = dec(sel_val$)
    sel_val = (sel_val and $0f) * 16 + (sel_val >> 4)

    if sel_idx = 0 then red$ = sel_val$ : poke $d100 + cidx, sel_val
    if sel_idx = 1 then green$ = sel_val$ : poke $d200 + cidx, sel_val
    if sel_idx = 2 then blue$ = sel_val$ : poke $d300 + cidx, sel_val

    gosub draw_rgb_text
    mod_flag = 1  
  bend

  return


'----------
.clear_edit
'----------
  tclr = 0 : tx = 20 : ty = 5 : a$ = "                   "
  gosub draw_text
  ty = 6 : gosub draw_text
  ty = 7 : gosub draw_text
  ty = 8 : gosub draw_text
  ty = 9 : gosub draw_text

  return


'----------
.incr_value
'----------
  if sel_idx = 0 then sel_val = dec(red$)
  if sel_idx = 1 then sel_val = dec(green$)
  if sel_idx = 2 then sel_val = dec(blue$)
  
  if alt_key <> 0 then sel_val = sel_val + 16 : else sel_val = sel_val + 1
  if sel_val > 255 then sel_val = 255

  sel_val = (sel_val and $0f) * 16 + (sel_val >> 4)

  if sel_idx = 0 then poke $d100 + cidx, sel_val
  if sel_idx = 1 then poke $d200 + cidx, sel_val
  if sel_idx = 2 then poke $d300 + cidx, sel_val

  return


'----------
.decr_value
'----------
  if sel_idx = 0 then sel_val = dec(red$)
  if sel_idx = 1 then sel_val = dec(green$)
  if sel_idx = 2 then sel_val = dec(blue$)
  
  if alt_key <> 0 then sel_val = sel_val - 16 : else sel_val = sel_val - 1
  if sel_val < 0 then sel_val = 0

  sel_val = (sel_val and $0f) * 16 + (sel_val >> 4)

  if sel_idx = 0 then poke $d100 + cidx, sel_val
  if sel_idx = 1 then poke $d200 + cidx, sel_val
  if sel_idx = 2 then poke $d300 + cidx, sel_val

  return


'------------------
.draw_colour_number
'------------------
  a$ = "color#: "
  a$ = a$ + right$(hex$(cy),1)
  a$ = a$ + right$(hex$(cx),1)
  tclr = 0 : tx = 20 : ty = 5
  gosub draw_text
  return


'---------------
.draw_rgb_values
'---------------
  gosub draw_colour_number

  cidx = cy * 16 + cx

  red = peek($d100 + cidx)
  green = peek($d200 + cidx)
  blue = peek($d300 + cidx)

  red$ = hex$(red)
  red$ = mid$(red$,4,1) + mid$(red$,3,1)

  green$ = hex$(green)
  green$ = mid$(green$,4,1) + mid$(green$,3,1)

  blue$ = hex$(blue)
  blue$ = mid$(blue$,4,1) + mid$(blue$,3,1)

  gosub draw_rgb_text

  for y = 6 to 9
    for x = 35 to 38
      wpoke $40800 + y * WIDTH + x * 2, $1000
      wpoke $ff80000 + y * WIDTH + x * 2, cidx * 256
    next x
  next y

  return


'-------------
.draw_rgb_text
'-------------
  tclr = 0 : tx = 20 : ty = 7 : a$ = "  red: "
  if sel_idx = 0 then a$ = a$ + KEY_REV_ON
  a$ = a$ + red$ + KEY_REV_OFF
  if len(red$) = 1 then a$ = a$ + " "
  if len(red$) = 0 then a$ = a$ + "  "
  gosub draw_text

  tclr = 0 : tx = 20 : ty = 8 : a$ = "green: "
  if sel_idx = 1 then a$ = a$ + KEY_REV_ON
  a$ = a$ + green$ + KEY_REV_OFF
  if len(green$) = 1 then a$ = a$ + " "
  if len(green$) = 0 then a$ = a$ + "  "
  gosub draw_text

  tclr = 0 : tx = 20 : ty = 9 : a$ = " blue: "
  if sel_idx = 2 then a$ = a$ + KEY_REV_ON
  a$ = a$ + blue$ + KEY_REV_OFF
  if len(blue$) = 1 then a$ = a$ + " "
  if len(blue$) = 0 then a$ = a$ + "  "
  gosub draw_text
  return


'---------
.draw_text
'---------
  idx = 0
  rev_flag = 0
  for k = 1 to len(a$)
    chr = asc(mid$(a$,k,1))
    if mid$(a$,k,1) = KEY_REV_ON then rev_flag = 1 : goto nxtdt
    if mid$(a$,k,1) = KEY_REV_OFF then rev_flag = 0 : goto nxtdt

    gosub petscii_to_screencode

    if rev_flag = 1 then chr = chr or $80

    wpoke $40800 + ty * WIDTH + (tx + idx) * 2, chr
    poke $ff80000 + ty * WIDTH + (tx + idx) * 2 + 1, tclr
    idx = idx + 1
.nxtdt
  next k
  return


'---------------------
.petscii_to_screencode
'---------------------
  if chr>=$00 and chr<=$1f then chr = chr or $80 : return
  if chr>=$20 and chr<=$3f then return
  if chr>=$40 and chr<=$5f then chr=chr and $bf : return
  if chr>=$60 and chr<=$7f then chr=chr and $df : return
  if chr>=$80 and chr<=$9f then chr=chr or $40 : return
  if chr>=$a0 and chr<=$bf then chr=(chr and $7f) or $40 : return
  if chr>=$c0 and chr<=$fe then chr=chr and $7f : return
  return


'-----------
.draw_cursor
'-----------
  for y = 0 to 15
    k = (cx + 1) * 8
    if cy <> y then k = 80 * 8
    ' prepare GOTOX char
    poke $ff80000 + (y + 1) * WIDTH + 160, %10010000  ' gotox bit + transp flag
    wpoke $40800 + (y + 1) * WIDTH + 160, k

    ' prepare cursor char
    wpoke $ff80002 + (y + 1) * WIDTH + 160, cursor_clr * 256  ' white 
    wpoke $40802 + (y + 1) * WIDTH + 160, $1001

    ' prepare GOTOX char (to off-screen)
    poke $ff80004 + (y + 1) * WIDTH + 160, %10010000  ' gotox bit + transp flag
    wpoke $40804 + (y + 1) * WIDTH + 160, 80 * 8
  next y

  return
ÿ