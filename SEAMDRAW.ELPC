#output "seamdraw"


'--------
.declares
'--------
#declare bkp_d054&, bkp_d058&, bkp_d059&, bkp_d05e&
#declare k, a$, x, y, my_err$, slice, frame
#declare tx, ty, tclr, idx, rev_flag, chr, value
#declare yy, xx, fidx
#declare cx, cy, cursor_clr, sel_clr
#declare clr_key$(15), ln$, frame_count, char_count, anim_count
#declare kk

#declare default_slice(100), char_type(100), char_idx(100)
#declare chr_width(100), chr_height(100)
#declare bb_tlx(100,10), bb_tly(100,10), bb_brx(100,10), bb_bry(100,10)
#declare bb_cnt(100)

#declare numeric_flag, ret, tmp_chr_width, tmp_chr_height
#declare old_chr_width, old_chr_height, old_fidx, tmp, tmp2
#declare new_char_idx, skip_clear

#declare rect_state, rect_x1%, rect_y1%, rect_x2%, rect_y2%, dr
#declare aptr_lo, aptr_hi

#declare pane_x%, pane_y%, pane_width%, pane_height%, pane_title%
#declare sel_idx%, state


'-------
.defines
'-------
#define KEY_ESCAPE = chr$(27)
#define KEY_UP = "{x91}"
#define KEY_DOWN = "{x11}"
#define KEY_LEFT = "{x9D}"
#define KEY_RIGHT = "{x1D}"

#define KEY_F1 = "{x85}"
#define KEY_F3 = "{x86}"
#define KEY_F4 = "{x8A}"
#define KEY_F5 = "{x87}"
#define KEY_F7 = "{x88}"
#define KEY_F8 = "{x8C}"
#define KEY_ESC = chr$(27)
#define KEY_REV_ON = "{x12}"
#define KEY_REV_OFF = "{x92}"
#define KEY_RETURN = chr$(13)
#define KEY_MEGA_A = "°"
#define KEY_MEGA_Q = "«"
#define KEY_MEGA_C = "¼"
#define KEY_MEGA_V = "¾"
#define KEY_MEGA_D = "¬"
#define KEY_MEGA_B = "¿"
#define KEY_MEGA_R = "²"
#define KEY_DEL = "{x14}"
#define KEY_CLR = "{x93}"

#define WIDTH = 250

#define OP_COPY = 0
#define OP_MIX  = 1
#define OP_SWAP = 2
#define OP_FILL = 3

#define STATE_DEFAULT = 0
#define STATE_BOUNDING_BOX = 1
#define STATE_BOUNDING_BOX2 = 2


trap runstop_trapper

'----
.main
'----
  gosub init

  gosub clear_frame_chars

  gosub redraw_screen

  gosub get_input

  goto cleanup
  end


'---------
.get_input
'---------
  do while 1
    gosub draw_cursor

    get a$

    if a$ = "<" then slice = mod(slice + 16 - 1, 16) : gosub draw_palette_slice
    if a$ = ">" then slice = mod(slice + 1, 16) : gosub draw_palette_slice

    if a$ = KEY_RIGHT then begin
      cx = cx + 1
      if cx = chr_width(fidx) * 8 then begin
        cx = chr_width(fidx) * 8 - 1
        if cy < (chr_height(fidx) * 8 - 1) then cy = cy + 1 : cx = 0
      bend
    bend

    if a$ = KEY_LEFT then begin
      cx = cx - 1
      if cx = -1 then begin
        cx = 0
        if cy > 0 then cy = cy - 1 : cx = chr_width(fidx) * 8 - 1
      bend
    bend

    if a$ = KEY_UP and cy > 0 then cy = cy - 1
    if a$ = KEY_DOWN and cy < (chr_height(fidx) * 8 - 1) then cy = cy + 1

    if state = STATE_DEFAULT then begin
      gosub check_colour_keys

      if a$ = KEY_F1 then gosub load_data
      if a$ = KEY_F3 then gosub save_data

      if a$ = "," and fidx > 0 then begin
        fidx = fidx - 1
        gosub redraw_screen
      bend

      if a$ = "." and fidx < frame_count - 1 then begin
        fidx = fidx + 1
        gosub redraw_screen
      bend

      if a$ = KEY_MEGA_A then gosub prompt_add_frame

      if a$ = KEY_CLR then gosub prompt_clear

      if a$ = KEY_MEGA_D then gosub duplicate

      if a$ = KEY_MEGA_B then gosub prompt_bounding_box

      if a$ = KEY_MEGA_R then gosub do_rectangle

    bend

    if state = STATE_BOUNDING_BOX or state = STATE_BOUNDING_BOX2 then begin
      if a$ = KEY_RETURN then gosub update_bounding_box_coord
    bend

    ' mega-q = exit
    if a$ = KEY_MEGA_Q then gosub handle_quit

    cursor_clr = mod(cursor_clr + 1, 16)

  loop


  return


'-------------------------
.update_bounding_box_coord
'-------------------------
  if state = STATE_BOUNDING_BOX then begin
    bb_tlx(fidx, sel_idx%) = cx
    bb_tly(fidx, sel_idx%) = cy
    state = STATE_BOUNDING_BOX2
    return
  bend

  if state = STATE_BOUNDING_BOX2 then begin
    bb_brx(fidx, sel_idx%) = cx
    bb_bry(fidx, sel_idx%) = cy
    state = STATE_DEFAULT

    gosub prompt_bounding_box
  bend

  return


'-----------------
.check_colour_keys
'-----------------
  for k = 0 to 15
    if a$ = clr_key$(k) then begin
      sel_clr = slice * 16 + k
      poke $ff80000 + (cy + 2) * WIDTH + cx * 2 + 1, sel_clr
      x = mod(cx, 8)
      y = mod(cy, 8)
      xx = int(cx / 8)
      yy = int(cy / 8)
      poke char_idx(fidx) * $40 + $40 * chr_height(fidx) * xx + $40 * yy + y * 8 + x, sel_clr
    bend
  next k

  if a$ = " " or a$ = KEY_DEL then begin
    poke $ff80000 + (cy + 2) * WIDTH + cx * 2 + 1, 12
    x = mod(cx, 8)
    y = mod(cy, 8)
    xx = int(cx / 8)
    yy = int(cy / 8)
    poke char_idx(fidx) * $40 + $40 * chr_height(fidx) * xx + $40 * yy + y * 8 + x, $00
  bend
  return



'-----------
.handle_quit
'-----------
  tclr = 0 : a$ = "quit: are you sure? (y/n)"
  pane_width% = len(a$) + 4
  pane_height% = 5
  gosub show_centred_pane

  get key a$
  if a$="y" then key on : goto cleanup
  
  gosub hide_pane
  return


'-----------------
.show_centred_pane
'-----------------
  pane_x% = (80 - pane_width%) / 2
  pane_y% = (50 - pane_height%) / 2

  gosub draw_pane

  tclr = 0 : tx = pane_x% + 2 : ty = pane_y% + 2
  gosub draw_text

  return


'---------
.draw_pane
'---------
  bank 0
  poke $7e10, pane_x%
  poke $7e11, pane_y%
  poke $7e12, pane_width%
  poke $7e13, pane_height%
^^  sys to $7f09, i0
  bank 128
  return


'--------
.hide_pane
'--------
  bank 0
  poke $7e10, pane_x%
  poke $7e11, pane_y%
  poke $7e12, pane_width%
  poke $7e13, pane_height%
^^  sys to $7f0c, i0
  bank 128
  return


'------------
.do_rectangle
'------------
  if rect_state = 0 then begin
    rect_x1% = cx
    rect_y1% = cy
    rect_state = 1

  bend : else begin

    rect_x2% = cx
    rect_y2% = cy

    dr = 1
    if rect_x1% > rect_x2% then dr = -1

    for cx = rect_x1% to rect_x2% step dr
      cy = rect_y1%
      gosub plot_pixel
      cy = rect_y2%
      gosub plot_pixel
    next cx

    dr = 1
    if rect_y1% > rect_y2% then dr = -1

    for cy = rect_y1% to rect_y2% step dr
      cx = rect_x1%
      gosub plot_pixel
      cx = rect_x2%
      gosub plot_pixel
    next cy

    rect_state = 0
  bend

  return


'----------
.plot_pixel
'----------
  poke $ff80000 + (cy + 2) * WIDTH + cx * 2 + 1, sel_clr
  x = mod(cx, 8)
  y = mod(cy, 8)
  xx = int(cx / 8)
  yy = int(cy / 8)
  poke char_idx(fidx) * $40 + $40 * chr_height(fidx) * xx + $40 * yy + y * 8 + x, sel_clr
  return


'-------------------
.prompt_bounding_box
'-------------------
  pane_width% = 30
  pane_height% = 30
  gosub show_centred_pane

  state = STATE_DEFAULT

  if sel_idx% >= bb_cnt(fidx) then sel_idx% = 0

  gosub draw_bounding_box_details

  do while 1
    get key a$
    if a$ = "a" then gosub add_bounding_box

    if a$ = "d" then gosub delete_bounding_box

    if a$ = KEY_DOWN then begin
      sel_idx% = mod(sel_idx% + 1, bb_cnt(fidx))
      gosub clear_pane
      gosub draw_bounding_box_details
    bend

    if a$ = KEY_UP then begin
      sel_idx% = mod(sel_idx% + bb_cnt(fidx) - 1, bb_cnt(fidx))
      gosub clear_pane
      gosub draw_bounding_box_details
    bend

    if (a$ = "e" or a$ = KEY_RETURN) and bb_cnt(fidx) > 0 then begin
      a$ = ""
      cx = bb_tlx(fidx, sel_idx%)
      cy = bb_tly(fidx, sel_idx%)
      state = STATE_BOUNDING_BOX
      gosub hide_pane
      exit
    bend

    if a$ = KEY_ESCAPE or a$ = KEY_MEGA_Q then begin
      a$ = ""
      gosub hide_pane
      exit
    bend
  loop

  return


'-------------------------
.draw_bounding_box_details
'-------------------------
  tx = pane_x% + 2 : ty = pane_y% + 2 : tclr = 0
  a$ = "bounding box details:"
  gosub draw_text

  ty = ty + 1 : a$ = "(a)dd  (d)elete  (e)dit"
  gosub draw_text

  idx = 0
  do while idx < bb_cnt(fidx)
    ty = ty + 2
    a$ = ""
    if idx = sel_idx% then a$ = KEY_REV_ON
    a$ = a$ + "(" + mid$(str$(bb_tlx(fidx, idx)), 2)
    a$ = a$ + "," + str$(bb_tly(fidx, idx)) + ") - ("
    a$ = a$ + mid$(str$(bb_brx(fidx, idx)), 2)
    a$ = a$ + "," + str$(bb_bry(fidx, idx)) + ")"
    gosub draw_text

    idx = idx + 1
  loop
  return


'----------------
.add_bounding_box
'----------------
  bb_cnt(fidx) = bb_cnt(fidx) + 1

  sel_idx% = bb_cnt(fidx) - 1

  gosub clear_pane
  gosub draw_bounding_box_details

  return


'-------------------
.delete_bounding_box
'-------------------
  if sel_idx% < bb_cnt(fidx) - 1 then begin
    for k = sel_idx% to bb_cnt(fidx) - 2
      bb_tlx(fidx, k) = bb_tlx(fidx, k + 1)
      bb_tly(fidx, k) = bb_tly(fidx, k + 1)
      bb_brx(fidx, k) = bb_brx(fidx, k + 1)
      bb_bry(fidx, k) = bb_bry(fidx, k + 1)
    next k
  bend

  bb_cnt(fidx) = bb_cnt(fidx) - 1

  if sel_idx% = bb_cnt(fidx) and sel_idx% > 0 then sel_idx% = bb_cnt(fidx) - 1

  gosub clear_pane
  gosub draw_bounding_box_details

  return


'----------
.clear_pane
'----------
  ' clear_pane
  bank 0 : sys $7f12 : bank 128
  return


'---------
.duplicate
'---------
  tmp_chr_width = chr_width(fidx)
  tmp_chr_height = chr_height(fidx)
  old_fidx = fidx
  tmp = frame_count - 1
  new_char_idx = char_idx(tmp) + chr_width(tmp) * chr_height(tmp)

  tmp = chr_width(fidx) * chr_height(fidx) * $40 - 1

  tmp2 = char_idx(fidx) * $40

  for k = 0 to tmp
    poke new_char_idx * $40 + k, peek(tmp2 + k)
  next k

  skip_clear = 1
  gosub add_frame
  return


'-------------
.redraw_screen
'-------------
  if old_chr_width <> chr_width(fidx) or old_chr_height <> chr_height(fidx) then begin
    gosub clrscreen
    gosub draw_palette_slice
    gosub draw_frame
    old_chr_width = chr_width(fidx)
    old_chr_height = chr_height(fidx)
  bend
  gosub draw_frame_contents
  gosub draw_frame_chars
  return


'------------
.prompt_clear
'------------
  tclr = 0 : a$ = "clear: are you sure? (y/n)"
  pane_width% = len(a$) + 4
  pane_height% = 5
  gosub show_centred_pane

  get key a$
  if a$="y" then begin
    key on
    gosub clear_frame_chars
    gosub draw_frame_contents
  bend
  
  gosub hide_pane

  return


'----------------
.prompt_add_frame
'----------------
  pane_width% = 30
  pane_height% = 7
  gosub show_centred_pane

  tclr = 0 : tx = pane_x% + 2 : ty = pane_y% + 2
  a$ = "add frame:"
  gosub draw_text

  ty = ty + 1
  a$ = "  enter char-width: "
  gosub draw_text

  tx = pane_x% + 23 : numeric_flag = 1 : gosub seam_input
  if ret = 0 then gosub hide_pane : return

  tmp_chr_width = val(ln$)

  ty = ty + 1
  tx = pane_x% + 2
  a$ = "  enter char-height: "
  gosub draw_text

  tx = pane_x% + 23 : numeric_flag = 1 : gosub seam_input
  if ret = 0 then gosub hide_pane : return

  tmp_chr_height = val(ln$)

  gosub hide_pane

.add_frame
  ' we got both params from user, now make it
  fidx = frame_count
  frame_count = frame_count + 1
  chr_width(fidx) = tmp_chr_width
  chr_height(fidx) = tmp_chr_height
  char_idx(fidx) = char_idx(fidx - 1) + chr_width(fidx-1) * chr_height(fidx-1)

  if skip_clear = 0 then begin
    gosub clear_frame_chars
    skip_clear = 0
  bend

  gosub redraw_screen
  
  return


'---------
.load_data
'---------
  pane_width% = 30
  pane_height% = 5
  gosub show_centred_pane

  tclr = 0 : tx = pane_x% + 2 : ty = pane_y% + 2 : a$ = "load name: "

  gosub draw_text

  tclr = 0 : tx = pane_x% + 13
  gosub seam_input

  gosub hide_pane

  if ret = 0 then return

  char_count = 0

  if len(ln$) > 0 then begin
    dopen #2,(ln$),r,u8
    if ds then tclr = 2 : a$ = "disk error" : gosub draw_text : return

    get#2, frame_count

    for k = 0 to frame_count - 1
      get#2, xx : char_type(k) = xx and 255
      get#2, xx : default_slice(k) = xx and 255
      get#2, xx : chr_width(k) = xx and 255
      get#2, xx : chr_height(k) = xx and 255
      get#2, xx, yy
      char_idx(k) = (xx and 255) + (yy and 255) * 256

      get#2, xx : bb_cnt(k) = xx and 255
      if bb_cnt(k) > 0 then begin
        for kk = 0 to bb_cnt(k) - 1
          get#2, xx, yy : bb_tlx(k,kk) = xx and 255 : bb_tly(k,kk) = yy and 255
          get#2, xx, yy : bb_brx(k,kk) = xx and 255 : bb_bry(k,kk) = yy and 255
        next kk
      bend

      char_count = char_count + chr_width(k) * chr_height(k)
    next k

    ' todo : add animation details here
    get#2, xx : anim_count = xx and 255
    if anim_count > 0 then begin
      for k = 0 to anim_count - 1
        ' load number of frames in anim
        ' load list of frame indices
      next k
    bend

    for k = 0 to char_count * $40
      get#2, xx
      poke char_idx(0) * $40 + k, xx and 255
    next k

    dclose #2

    gosub draw_frame_contents
  bend

  return


'---------
.save_data
'---------
  pane_width% = 30
  pane_height% = 5
  gosub show_centred_pane

  tclr = 0 : tx = pane_x% + 2 : ty = pane_y% + 2 : a$ = "save name: "
  gosub draw_text

  tclr = 0 : tx = pane_x% + 13
  gosub seam_input

  gosub hide_pane

  if ret = 0 then return

  char_count = 0

  if len(ln$) > 0 then begin
    delete (ln$)
    dopen #2,(ln$),w,u8
    print #2, chr$(frame_count);
    
    for k = 0 to frame_count - 1
      print #2, chr$(char_type(k));     ' char-type = fcm / ncm
      print #2, chr$(default_slice(k));
      print #2, chr$(chr_width(k));
      print #2, chr$(chr_height(k));
      print #2, chr$(char_idx(k) and $ff);
      print #2, chr$(char_idx(k) >> 8);
          
      print #2, chr$(bb_cnt(k));
      if bb_cnt(k) > 0 then begin
        for kk = 0 to bb_cnt(0) - 1
          print #2, chr$(bb_tlx(k, kk));chr$(bb_tly(k, kk));
          print #2, chr$(bb_brx(k, kk));chr$(bb_bry(k, kk));
        next kk
      bend

      char_count = char_count + chr_width(k) * chr_height(k)
    next k

    ' todo : add animation details here
    print #2, chr$(anim_count);
    if anim_count > 0 then begin
      for k = 0 to anim_count - 1
        ' save number of frames in anim
        ' save list of frame indices
      next k
    bend

    for k = 0 to char_count * $40
      print #2, chr$(peek(char_idx(0) * $40 + k));
    next k

    dclose #2
    
  bend

  return


'----------
.seam_input
'----------
  ln$ = ""
  do while 1

    a$ = ln$ + KEY_REV_ON + " " + KEY_REV_OFF + " "
    gosub draw_text

    get key a$
    if (a$ >= "a" and a$ <= "z" and not numeric_flag) or (a$ >= "0" and a$ <= "9") or a$="." then begin
      ln$ = ln$ + a$
    bend

    if a$ = KEY_DEL then begin
      if len(ln$) > 0 then ln$ = left$(ln$, len(ln$) - 1)
    bend

    if a$ = KEY_ESCAPE then ret = 0 : exit
    if a$ = KEY_RETURN then ret = 1 : exit
  loop

  ' remove cursor at end
  a$ = ln$ + " "
  gosub draw_text

  numeric_flag = 0
  return



'-----------
.draw_cursor
'-----------
  for y = 0 to chr_height(fidx) * 8 - 1
    k = cx * 8
    if cy <> y then k = 80 * 8
    ' prepare GOTOX char
    poke $ff80000 + (y + 2) * WIDTH + 160, %10010000  ' gotox bit + transp flag
    wpoke $40800 + (y + 2) * WIDTH + 160, k

    ' prepare cursor char
    wpoke $ff80002 + (y + 2) * WIDTH + 160, cursor_clr * 256  ' white 
    wpoke $40802 + (y + 2) * WIDTH + 160, $1001

    ' prepare GOTOX char (to off-screen)
    poke $ff80004 + (y + 2) * WIDTH + 160, %10010000  ' gotox bit + transp flag
    wpoke $40804 + (y + 2) * WIDTH + 160, 80 * 8
  next y

  return


'-------------------
.draw_frame_contents
'-------------------
  tclr = 0 : tx = 0 : ty = 1 : a$ = "frame#" + mid$(str$(fidx), 2)
  gosub draw_text

  bank 0
  poke $7e16, chr_width(fidx)
  poke $7e17, chr_height(fidx)
  wpoke $7e18, char_idx(fidx)
  sys $7f15
  bank 128
  return


'----------
.draw_frame
'----------

  ty = 1 : tx = 0 : tclr = 12

  for yy = 1 to chr_height(fidx)
    ty = ty + 1
    tx = 0

    for x = 1 to chr_width(fidx)
      value = $1002 : gosub plot_char
      tx = tx + 1

      value = $1003
      for k = 1 to 7
        gosub plot_char
        tx = tx + 1
      next k
    next x

    value = $1006 : gosub plot_char

    for y = 1 to 7
      ty = ty + 1
      tx = 0
      for x = 1 to chr_width(fidx)
        value = $1004 : gosub plot_char
        tx = tx + 1

        value = $1005
        for k = 1 to 7
          gosub plot_char
          tx = tx + 1
        next k
      next x

      value = $1006 : gosub plot_char

    next y
  next yy

  ty = ty + 1
  tx = 0
  value = $1007
  for x = 1 to chr_width(fidx) * 8
    gosub plot_char
    tx = tx + 1
  next x

  return


'-----------------
.clear_frame_chars
'-----------------
  for k = 0 to chr_width(fidx) * chr_height(fidx) * 64 - 1
    poke char_idx(fidx) * 64 + k, 0
  next k

  return


'----------------
.draw_frame_chars
'----------------
  tclr = 0 : tx = 60 : ty = 9
  a$ = "char-idx: $" + right$(hex$(char_idx(fidx)),4)
  gosub draw_text

  k = char_idx(fidx)
  for x = 0 to chr_width(fidx) - 1
    for y = 0 to chr_height(fidx) - 1
      wpoke $40800 + (y + 10) * WIDTH + (x + 60) * 2, k
      k = k + 1
    next y
  next x

  return


'---------
.plot_char
'---------
  bank 0
  poke $7e0d, tx
  poke $7e0e, ty
  poke $7e0f, tclr
  wpoke $7e14, value

^^ sys to $7f0f, i0
  bank 128
  return
  

'------------------
.draw_palette_slice
'------------------
  tclr = 0 : tx = 0 : ty = 0 : a$ = "slice " + right$(hex$(slice),1) + ": "
  gosub draw_text

  for k = 0 to 15
    wpoke $40800 + (9 + k) * 2, $1000
    wpoke $ff80000 + (9 + k) * 2, (slice * 16 + k) * 256
  next k

  tx = 9 : ty = 1 : a$ = "1234qwerasdfzxcv"
  gosub draw_text

  return


'---------
.clrscreen
'---------
  bank 0
^^ sys to $7f06, i0
  bank 128
  return


'----
.init
'----
  bank 128
  key off

  bload "game.pal",p($ffd3100)
  bload "chars.bin",p($40000),r
  bload "asmhelper"

  aptr_lo = pointer(a$) and $ff
  aptr_hi = pointer(a$) / 256

  ' hard-coding a few values that will be variable in future
  fidx = 0
  chr_width(0) = 3
  chr_height(0) = 3
  char_idx(0) = $1400
  frame_count = 1
  anim_count = 0


  clr_key$(0) = "1"
  clr_key$(1) = "2"
  clr_key$(2) = "3"
  clr_key$(3) = "4"
  clr_key$(4) = "q"
  clr_key$(5) = "w"
  clr_key$(6) = "e"
  clr_key$(7) = "r"
  clr_key$(8) = "a"
  clr_key$(9) = "s"
  clr_key$(10) = "d"
  clr_key$(11) = "f"
  clr_key$(12) = "z"
  clr_key$(13) = "x"
  clr_key$(14) = "c"
  clr_key$(15) = "v"


  print "{x93}";KEY_ESCAPE;"5";
  
  bkp_d054& = peek($d054)
  bkp_d058& = peek($d058)
  bkp_d059& = peek($d059)
  bkp_d05e& = peek($d05e)

  ' set SEAM mode CHR16 + FCLRHI
  setbit $d054, 0
  setbit $d054, 2

  wpoke $d058, WIDTH
  poke $d05e, WIDTH / 2

  poke $d021, 14
  poke $d020, 0

  return


'---------------
.runstop_trapper
'---------------
  ' if er<>30 then resume  ' ignore everything except run/stop

  my_err$ = "?" + err$(er) + " in line " + str$(el)

.cleanup
  print "{x93}";my_err$
  trap
  key on
  poke $d054, bkp_d054&
  poke $d058, bkp_d058&
  poke $d059, bkp_d059&
  poke $d05e, bkp_d05e&

  end


'---------
.draw_text
'---------
  bank 0
  poke $7e0d, tx
  poke $7e0e, ty
  poke $7e0f, tclr 

  sys $7f03, 0, aptr_lo, aptr_hi
  bank 128
  return
ÿ