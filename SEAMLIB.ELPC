#output "seamlib"


'--------
.declares
'--------
#declare fidx, frame_count%, anim_count
#declare bkp_d054&, bkp_d058&, bkp_d059&, bkp_d05e&
#declare my_err$, k, idx, x, y, value

' frame details
#declare default_slice(100), char_type(100), char_idx%(100)
#declare chr_width%(100), chr_height%(100)
#declare bb_tlx(100,10), bb_tly(100,10), bb_brx(100,10), bb_bry(100,10)
#declare bb_cnt(100)
#declare old_fidx

' sprite details
#declare spr_chr_width%(100), spr_chr_height%(100), spr_char_idx%(100)
#declare spr_frame_count%(100), spr_frames%(100,20), spr_visible%(100)
#declare spr_fidx%(100), stage_x_offs%(100), spr_count
#declare spr_ox%(100), spr_oy%(100)

#declare objx, objy, oldyy, minyy, maxyy, yybot 
#declare a$, yy, offsy, tmp, tmpx, tmpy
#declare tclr, tx, ty, rev_flag, chr
#declare ln$, char_count, xx, kk, sidx, old_sidx, anim_tmr
#declare cx, cy

#declare debug_bb = 1

'-------
.defines
'-------
#define KEY_ESCAPE = chr$(27)
#define KEY_REV_ON = "{x12}"
#define KEY_REV_OFF = "{x92}"
#define KEY_UP = "{x91}"
#define KEY_DOWN = "{x11}"
#define KEY_LEFT = "{x9D}"
#define KEY_RIGHT = "{x1D}"
#define KEY_MEGA_Q = "«"

#define WIDTH = 250

#define OP_COPY = 0
#define OP_MIX  = 1
#define OP_SWAP = 2
#define OP_FILL = 3


#define INVALID = -666

' seam frames
#define F_CARPET = 0
#define F_WOLF1 = 1
#define F_KEY = 2
#define F_BANANA = 3
#define F_WBOTTLE = 4
#define F_WOLF2 = 5

' seam sprites
#define S_CARPET = 0
#define S_KEY = 1
#define S_BANANA = 2
#define S_WBOTTLE = 3
#define S_WOLF1 = 4
#define S_WOLF2 = 5
#define S_WOLF3 = 6
#define S_WOLF4 = 7

spr_count = 8

trap runstop_trapper

'----
.main
'----
  gosub init

  gosub clrscreen

  for sidx = 0 to spr_count - 1
    gosub stage_object
  next sidx

  sidx = 0
  gosub user_input

  end



'----
.init
'----
  bank 0
  bload "game.pal",p($ffd3100)
  ln$ = "moana4.bin"
  gosub load_data
  bload "asmhelper"
  bank 128
  key off

  ' prepare vars for assembly
  bank 0
  wpoke $7e00, pointer(spr_ox%(0))
  wpoke $7e02, pointer(spr_oy%(0))
  wpoke $7e04, pointer(spr_chr_width%(0))
  wpoke $7e06, pointer(spr_chr_height%(0))
  wpoke $7e08, pointer(spr_char_idx%(0))
  wpoke $7e0a, pointer(stage_x_offs%(0))
  poke $7e0c, spr_count
  bank 128

  ' prepare sprite details
  spr_chr_width%(S_CARPET) = 3
  spr_chr_height%(S_CARPET) = 3
  spr_char_idx%(S_CARPET) = char_idx%(F_CARPET)
  spr_frame_count%(S_CARPET) = 1
  spr_frames%(S_CARPET, 0) = F_CARPET

  spr_chr_width%(S_KEY) = 1
  spr_chr_height%(S_KEY) = 1
  spr_char_idx%(S_KEY) = char_idx%(F_KEY)
  spr_frame_count%(S_KEY) = 1
  spr_frames%(S_KEY, 0) = F_KEY

  spr_chr_width%(S_BANANA) = 2
  spr_chr_height%(S_BANANA) = 2
  spr_char_idx%(S_BANANA) = char_idx%(F_BANANA)
  spr_frame_count%(S_BANANA) = 1
  spr_frames%(S_BANANA, 0) = F_BANANA

  spr_chr_width%(S_WBOTTLE) = 3
  spr_chr_height%(S_WBOTTLE) = 3
  spr_char_idx%(S_WBOTTLE) = char_idx%(F_WBOTTLE)
  spr_frame_count%(S_WBOTTLE) = 1
  spr_frames%(S_WBOTTLE, 0) = F_WBOTTLE

  for k = 0 to 3
    spr_chr_width%(S_WOLF1 + k) = 4
    spr_chr_height%(S_WOLF1 + k) = 4
    spr_char_idx%(S_WOLF1 + k) = char_idx%(F_WOLF1)
    spr_frame_count%(S_WOLF1 + k) = 2
    spr_frames%(S_WOLF1 + k, 0) = F_WOLF1
    spr_frames%(S_WOLF1 + k, 1) = F_WOLF2
  next k
  
  for k = 0 to spr_count - 1
    spr_ox%(k) = k * 6 * 8
    spr_oy%(k) = 10 * 8
  next k

  ' hard-coding a few values that will be variable in future
  fidx = 0

  oldyy = INVALID

  print "{x93}";KEY_ESCAPE;"5";
  
  bkp_d054& = peek($d054)
  bkp_d058& = peek($d058)
  bkp_d059& = peek($d059)
  bkp_d05e& = peek($d05e)

  ' set SEAM mode CHR16 + FCLRHI
  setbit $d054, 0
  setbit $d054, 2

  wpoke $d058, WIDTH
  poke $d05e, WIDTH / 2

  poke $d021, 14
  poke $d020, 0

  ' $1000 = solid fcm char
  for k = 0 to 63
    poke $40000 + k, $ff
  next k

  ' $1001 = box char
  for k = 0 to 63
    if int(k / 8) = 0 or int(k / 8) = 7 then poke $40040 + k, $ff:goto nxt
    if mod(k, 8) = 0 or mod(k, 8) = 7 then poke $40040 + k, $ff:goto nxt
    poke $40040 + k, $00
.nxt
  next k

  ' $1002 = tl box
  idx = 0
  for y = 0 to 7
    for x = 0 to 7
    value = $ff
    if y = 0 then value = $01
    if x = 0 then value = $01
    if y = 7 and x = 7 then value = $01
    poke $40080 + idx, value
    idx = idx + 1
    next x
  next y

  ' $1003 = t box
  idx = 0
  for y = 0 to 7
    for x = 0 to 7
      value = $ff
      if y = 0 then value = $01
      if y = 7 and x = 7 then value = $01
      poke $400c0 + idx, value
      idx = idx + 1
    next x
  next y

  ' $1004 = l box
  idx = 0
  for y = 0 to 7
    for x = 0 to 7
      value = $ff
      if x = 0 then value = $01
      if y = 7 and x = 7 then value = $01
      poke $40100 + idx, value
      idx = idx + 1
    next x
  next y

  ' $1005 = m box
  idx = 0
  for y = 0 to 7
    for x = 0 to 7
      value = $ff
      if y = 7 and x = 7 then value = $01
      poke $40140 + idx, value
      idx = idx + 1
    next x
  next y

  ' $1006 = l line
  idx = 0
  for y = 0 to 7
    for x = 0 to 7
      value = $00
      if x = 0 then value = $01
      poke $40180 + idx, value
      idx = idx + 1
    next x
  next y

  ' $1007 = t line
  idx = 0
  for y = 0 to 7
    for x = 0 to 7
      value = $00
      if y = 0 then value = $01
      poke $401c0 + idx, value
      idx = idx + 1
    next x
  next y


  return


'---------------
.runstop_trapper
'---------------
  ' if er<>30 then resume  ' ignore everything except run/stop

  my_err$ = "?" + err$(er) + " in line " + str$(el)

.cleanup
  print "{x93}";my_err$
  trap
  poke $d054, bkp_d054&
  poke $d058, bkp_d058&
  poke $d059, bkp_d059&
  poke $d05e, bkp_d05e&

  key on

  end


'---------
.clrscreen
'---------
  edma OP_FILL, WIDTH * 50, 32, $40800
  edma OP_FILL, WIDTH * 50, 0, $ff80000

  ' clear screen
  for y = 0 to 49
   for x = 0 to 79
     poke $40800 + y * WIDTH + x * 2 + 1, 0
   next x
  next y


  return



'------------
.stage_object
'------------
  if sidx > 0 then begin
    stage_x_offs%(sidx) = stage_x_offs%(sidx-1) + spr_chr_width%(sidx-1) + 1
  bend

  for y = 0 to 49
    ' prepare initial gotox char
    poke $ff80000 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2, %10010000
    wpoke $40800 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2, 80 * 8  ' keep off-screen initially

    ' prepare ending gotox char
    poke $ff80000 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2 + (spr_chr_width%(sidx) + 1) * 2, %10010000
    wpoke $40800 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2 + (spr_chr_width%(sidx) + 1) * 2, 80 * 8
  next y

  gosub draw_object

  return


'----------
.user_input
'----------
  do while 1
    ' gosub draw_coords

    gosub draw_objects

    gosub animate_objects

    get a$
    if a$ = KEY_LEFT then spr_ox%(sidx) = spr_ox%(sidx) - 1
    if a$ = KEY_RIGHT then spr_ox%(sidx) = spr_ox%(sidx) + 1
    if a$ = KEY_UP then spr_oy%(sidx) = spr_oy%(sidx) - 1
    if a$ = KEY_DOWN then spr_oy%(sidx) = spr_oy%(sidx) + 1
    if a$ = KEY_MEGA_Q then goto cleanup

    if a$ = "," and sidx > 0 then sidx = sidx - 1
    if a$ = "." and sidx < spr_count - 1 then sidx = sidx + 1
  loop
  return


'---------------
.animate_objects
'---------------
  anim_tmr = mod (anim_tmr + 1, 8)

  if anim_tmr = 0 then begin
    for k = 0 to 3
      fidx = spr_fidx%(S_WOLF1 + k)
      fidx = mod(fidx + 1, 2)
      spr_fidx%(S_WOLF1 + k) = fidx
      tmp = char_idx%(spr_frames%(S_WOLF1 + k, fidx))
      spr_char_idx%(S_WOLF1 + k) = tmp
    next k
  bend

  return


'-----------
.draw_coords
'-----------
  tclr = 0 : tx = 5 : ty = 4
  a$ = "sprite index =" + str$(sidx)
  gosub draw_text
  tclr = 0 : tx = 5 : ty = 5
  a$ = "x =" + str$(spr_ox%(sidx)) + ", y =" + str$(spr_oy%(sidx)) + "     "
  gosub draw_text
  return


'------------
.draw_objects
'------------
  vsync 250
  border 3
bank 0
^^  sys to $7f00, i0
  bank 128
  return

  ' TODO: remove below once sys call above works

  old_sidx = sidx
  for sidx = 0 to spr_count - 1
    gosub draw_object
  next sidx
  sidx = old_sidx
  return


'-----------
.draw_object
'-----------
'  bank 0
'  wpoke $7e00, spr_ox%(fidx)
'  wpoke $7e02, spr_oy%(fidx)
'  poke $7e04, chr_width%(fidx)
'  poke $7e05, chr_height%(fidx)
'  wpoke $7e06, char_idx%(fidx)
'  wpoke $7e08, stage_x_offs%(fidx)
'  poke $7e0a, frame_count%
'  bank 128 : border 7 : bank 0

  objx = spr_ox%(sidx)
  objy = spr_oy%(sidx)
  vsync 250
  border 3

  yy = int(objy / 8)
  yybot = yy + chr_height%(fidx) ' - 1
  offsy = mod(objy, 8)

  ' clear prior position (if needbe)
  if oldyy <> INVALID and yy <> oldyy then begin
    minyy = oldyy
    maxyy = oldyy + chr_height%(fidx) ' - 1
    if minyy < yy and yy < maxyy then maxyy = yy - 1
    if minyy < yybot and yybot < maxyy then minyy = yybot + 1

    ' hide these rows off-screen
    for y = minyy to maxyy
      wpoke $40800 + y * WIDTH + stage_x_offs%(fidx) * 2 + 160, 80 * 8 
    next y
  bend

  vsync 250
  border 2

  ' draw chars on desired yrows, and at right objx position
  idx = char_idx%(fidx)
  tmpx = chr_width%(fidx) - 1
  tmpy = chr_height%(fidx) - 1
  for x = 0 to tmpx
    for y = 0 to tmpy
      k = $40800 + (yy + y) * WIDTH + stage_x_offs%(fidx) * 2 + 162 + x * 2
      wpoke k, idx

      ' copy last y-line an extra line below (to help with y scrolling)
      if y = tmpy then begin
        wpoke k + WIDTH, idx
      bend

      idx = idx + 1
    next y
  next x

  ' handle negative x
  x = objx
  if objx < 0 then x = 1024 + objx

  k = x + (offsy * 32 + 16) * 256

  ' set initial rowmask
  tmp = $ff80000 + yy * WIDTH + stage_x_offs%(fidx) * 2 + 160
  poke tmp, %10011000
  poke tmp + 1, 255 << offsy and 255


  ' set initial gotox char
  for y = yy to yy + tmpy
    tmp = y * WIDTH + stage_x_offs%(fidx) * 2 + 160
    if y <> yy then begin
      poke $ff80000 + tmp, %10010000
    bend
    wpoke $40800 + tmp, k
  next y

  ' set final yoffs
  k = x + ( ((8-offsy) and 7) * 32) * 256
  wpoke $40800 + yybot * WIDTH + stage_x_offs%(fidx) * 2 + 160, k

  ' set final rowmask
  tmp = $ff80000 + yybot * WIDTH + stage_x_offs%(fidx) * 2 + 160
  poke tmp, %10011000
  poke tmp + 1, 255 >> (8 - offsy) and 255

  oldyy = yy

  border 0
  return


'---------
.draw_text
'---------
  idx = 0
  rev_flag = 0
  for k = 1 to len(a$)
    chr = asc(mid$(a$,k,1))
    if mid$(a$,k,1) = KEY_REV_ON then rev_flag = 1 : goto nxtdt
    if mid$(a$,k,1) = KEY_REV_OFF then rev_flag = 0 : goto nxtdt

    gosub petscii_to_screencode

    if rev_flag = 1 then chr = chr or $80

    wpoke $40800 + ty * WIDTH + (tx + idx) * 2, chr
    poke $ff80000 + ty * WIDTH + (tx + idx) * 2 + 1, tclr
    idx = idx + 1
.nxtdt
  next k
  return


'---------------------
.petscii_to_screencode
'---------------------
  if chr>=$00 and chr<=$1f then chr = chr or $80 : return
  if chr>=$20 and chr<=$3f then return
  if chr>=$40 and chr<=$5f then chr=chr and $bf : return
  if chr>=$60 and chr<=$7f then chr=chr and $df : return
  if chr>=$80 and chr<=$9f then chr=chr or $40 : return
  if chr>=$a0 and chr<=$bf then chr=(chr and $7f) or $40 : return
  if chr>=$c0 and chr<=$fe then chr=chr and $7f : return
  return


'---------
.load_data
'---------
  char_count = 0

  if len(ln$) > 0 then begin
    dopen #2,(ln$),r,u8
    if ds then tclr = 2 : a$ = "disk error" : gosub draw_text : return

    get#2, frame_count%

    for k = 0 to frame_count% - 1
      get#2, xx : char_type(k) = xx and 255
      get#2, xx : default_slice(k) = xx and 255
      get#2, xx : chr_width%(k) = xx and 255
      get#2, xx : chr_height%(k) = xx and 255
      get#2, xx, yy
      char_idx%(k) = (xx and 255) + (yy and 255) * 256
      get#2, xx : bb_cnt(k) = xx and 255
      if bb_cnt(k) > 0 then begin
        for kk = 0 to bb_cnt(k) - 1
          get#2, xx, yy : bb_tlx(k,kk) = xx and 255 : bb_tly(k,kk) = yy and 255
          get#2, xx, yy : bb_brx(k,kk) = xx and 255 : bb_bry(k,kk) = yy and 255
        next kk
      bend

      char_count = char_count + chr_width%(k) * chr_height%(k)
    next k

    ' todo : add animation details here
    get#2, xx : anim_count = xx and 255
    if anim_count > 0 then begin
      for k = 0 to anim_count - 1
        ' load number of frames in anim
        ' load list of frame indices
      next k
    bend

    for k = 0 to char_count * $40
      get#2, xx
      poke char_idx%(0) * $40 + k, xx and 255
    next k

    dclose #2

    if debug_bb = 1 then gosub draw_bounding_boxes

  bend

  return


'-------------------
.draw_bounding_boxes
'-------------------
  for fidx = 0 to frame_count% - 1
    if bb_cnt(fidx) > 0 then begin
      for k = 0 to bb_cnt(fidx) - 1

        for cx = bb_tlx(fidx, k) to bb_brx(fidx, k)
          cy = bb_tly(fidx, k)
          gosub plot_pixel
          cy = bb_bry(fidx, k)
          gosub plot_pixel
        next cx

        for cy = bb_tly(fidx, k) to bb_bry(fidx, k)
          cx = bb_tlx(fidx, k)
          gosub plot_pixel
          cx = bb_brx(fidx, k)
          gosub plot_pixel
        next cy

      next k
    bend
  next fidx

  return


'----------
.plot_pixel
'----------
  x = mod(cx, 8)
  y = mod(cy, 8)
  xx = int(cx / 8)
  yy = int(cy / 8)
  poke char_idx%(fidx) * $40 + $40 * chr_height%(fidx) * xx + $40 * yy + y * 8 + x, 1

  return
ÿ