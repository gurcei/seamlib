#output "seamlib"

#define SPR_MAX = 9 - 1

'--------
.declares
'--------
#declare fidx, frame_count%, anim_count
#declare bkp_d054&, bkp_d058&, bkp_d059&, bkp_d05e&
#declare my_err$, k, idx, x, y, value

' frame details
#declare default_slice(100), char_type(100), char_idx%(100)
#declare chr_width%(100), chr_height%(100)
#declare bb_tlx&(100,10), bb_tly&(100,10), bb_brx&(100,10), bb_bry&(100,10)
#declare bb_cnt&(100)
#declare old_fidx

' sprite details
#declare spr_chr_width%(100), spr_chr_height%(100), spr_char_idx%(100)
#declare spr_frame_count%(100), spr_frames&(100,20), spr_visible%(100)
#declare spr_fidx&(100), stage_x_offs%(100), spr_count
#declare spr_ox%(100), spr_oy%(100)
#declare spr_collide&(SPR_MAX ,SPR_MAX)
#declare objx, objy, oldyy, minyy, maxyy, yybot 
#declare a$, yy, offsy, tmp, tmpx, tmpy
#declare tclr, tx, ty, rev_flag, chr
#declare ln$, char_count, xx, kk, sidx, old_sidx, anim_tmr
#declare cx, cy, sidx2, objx2, objy2, k1, k2
#declare box1_x1%, box1_y1%, box1_x2%, box1_y2%
#declare box2_x1%, box2_y1%, box2_x2%, box2_y2%
#declare collision_flag, fidx2
#declare aptr_lo, aptr_hi, score, health, radius

#declare wolf_x(3), wolf_y(3), wolf_vx(3), wolf_vy(3), dx, dy

#declare pane_x%, pane_y%, pane_width%, pane_height%
#declare game_over_flag

#declare cycle_start, colour_cycle_flag
#declare default_red&(32), default_green&(32), default_blue&(32)

#declare debug_bb = 0

'-------
.defines
'-------
#define KEY_ESCAPE = chr$(27)
#define KEY_REV_ON = "{x12}"
#define KEY_REV_OFF = "{x92}"
#define KEY_UP = "{x91}"
#define KEY_DOWN = "{x11}"
#define KEY_LEFT = "{x9D}"
#define KEY_RIGHT = "{x1D}"
#define KEY_MEGA_Q = "«"

#define WIDTH = 250

#define OP_COPY = 0
#define OP_MIX  = 1
#define OP_SWAP = 2
#define OP_FILL = 3


#define INVALID = -666

' seam frames
#define F_CARPET = 0
#define F_WOLF1 = 1
#define F_KEY = 2
#define F_BANANA = 3
#define F_WBOTTLE = 4
#define F_WOLF2 = 5
#define F_GIRL1 = 6
#define F_GIRL2 = 7

' seam sprites
#define S_CARPET = 0
#define S_KEY = 1
#define S_BANANA = 2
#define S_WBOTTLE = 3
#define S_WOLF1 = 4
#define S_WOLF2 = 5
#define S_WOLF3 = 6
#define S_WOLF4 = 7
#define S_GIRL = 8

spr_count = SPR_MAX + 1

trap runstop_trapper

'----
.main
'----
  gosub init


  do while 1
    gosub title_screen

    for sidx = 0 to spr_count - 1
      gosub stage_object
    next sidx

    sidx = 0
    gosub main_game
  loop

  end


'------------
.title_screen
'------------
  gosub clrscreen

  tclr = 0 : tx = 0 : ty = 0
  a$ = "======"
  gosub draw_text

  ty = ty + 1 : a$ = "SPRING"
  gosub draw_text

  ty = ty + 1 : a$ = "======  A game by Moana and Gurce"
  gosub draw_text

  ty = ty + 2 : a$ = "Made using the 'seamlib' library."
  gosub draw_text

  ty = ty +2 : a$ = "Joystick port 2"
  gosub draw_text

  ty = ty + 2 : a$ = "Press any key to start"
  gosub draw_text

  k = fre(1)  ' garbage collect

  get key a$

  gosub clrscreen

  return


'----
.init
'----
  bank 0
  bload "game.pal",p($ffd3100)
  ln$ = "moana4.bin"
  gosub load_data
  bload "asmhelper"
  bank 128
  key off

  print chr$(14);  ' lower-case

  gosub store_default_colours

  aptr_lo = pointer(a$) and $ff
  aptr_hi = pointer(a$) / 256

  ' prepare interface vars for assembly
  bank 0
  wpoke $7e00, pointer(spr_ox%(0))
  wpoke $7e02, pointer(spr_oy%(0))
  wpoke $7e04, pointer(spr_chr_width%(0))
  wpoke $7e06, pointer(spr_chr_height%(0))
  wpoke $7e08, pointer(spr_char_idx%(0))
  wpoke $7e0a, pointer(stage_x_offs%(0))
  poke $7e0c, spr_count

  wpoke $7e1a, pointer(spr_fidx&(0))
  wpoke $7e1c, pointer(spr_frames&(0,0))
  wpoke $7e1e, pointer(bb_cnt&(0))
  wpoke $7e20, pointer(bb_tlx&(0,0))
  wpoke $7e22, pointer(bb_tly&(0,0))
  wpoke $7e24, pointer(bb_brx&(0,0))
  wpoke $7e26, pointer(bb_bry&(0,0))
  wpoke $7e28, pointer(spr_collide&(0,0))
  bank 128

  ' prepare sprite details
  spr_chr_width%(S_CARPET) = 3
  spr_chr_height%(S_CARPET) = 3
  spr_char_idx%(S_CARPET) = char_idx%(F_CARPET)
  spr_frame_count%(S_CARPET) = 1
  spr_frames&(S_CARPET, 0) = F_CARPET

  spr_chr_width%(S_KEY) = 1
  spr_chr_height%(S_KEY) = 1
  spr_char_idx%(S_KEY) = char_idx%(F_KEY)
  spr_frame_count%(S_KEY) = 1
  spr_frames&(S_KEY, 0) = F_KEY

  spr_chr_width%(S_BANANA) = 2
  spr_chr_height%(S_BANANA) = 2
  spr_char_idx%(S_BANANA) = char_idx%(F_BANANA)
  spr_frame_count%(S_BANANA) = 1
  spr_frames&(S_BANANA, 0) = F_BANANA

  spr_chr_width%(S_WBOTTLE) = 3
  spr_chr_height%(S_WBOTTLE) = 3
  spr_char_idx%(S_WBOTTLE) = char_idx%(F_WBOTTLE)
  spr_frame_count%(S_WBOTTLE) = 1
  spr_frames&(S_WBOTTLE, 0) = F_WBOTTLE

  for k = 0 to 3
    spr_chr_width%(S_WOLF1 + k) = 4
    spr_chr_height%(S_WOLF1 + k) = 4
    spr_char_idx%(S_WOLF1 + k) = char_idx%(F_WOLF1)
    spr_frame_count%(S_WOLF1 + k) = 2
    spr_frames&(S_WOLF1 + k, 0) = F_WOLF1
    spr_frames&(S_WOLF1 + k, 1) = F_WOLF2
  next k

  spr_chr_width%(S_GIRL) = 4
  spr_chr_height%(S_GIRL) = 4
  spr_char_idx%(S_GIRL) = char_idx%(F_GIRL1)
  spr_frame_count%(S_GIRL) = 2
  spr_frames&(S_GIRL, 0) = F_GIRL1
  spr_frames&(S_GIRL, 1) = F_GIRL2
  
  ' keep all sprites off-screen to start with
  ' that's my simple workaround for now to make them 'invisible'
  for k = 0 to spr_count - 1
    spr_ox%(k) = 640
    spr_oy%(k) = 10 * 8
  next k

  ' hard-coding a few values that will be variable in future
  fidx = 0

  oldyy = INVALID

  print "{x93}";KEY_ESCAPE;"5";
  
  bkp_d054& = peek($d054)
  bkp_d058& = peek($d058)
  bkp_d059& = peek($d059)
  bkp_d05e& = peek($d05e)

  ' set SEAM mode CHR16 + FCLRHI
  setbit $d054, 0
  setbit $d054, 2

  wpoke $d058, WIDTH
  poke $d05e, WIDTH / 2

  poke $d021, 14
  poke $d020, 0

  return


'---------------
.runstop_trapper
'---------------
  ' if er<>30 then resume  ' ignore everything except run/stop

  my_err$ = "?" + err$(er) + " in line " + str$(el)

.cleanup
  print "{x93}";my_err$
  trap
  poke $d054, bkp_d054&
  poke $d058, bkp_d058&
  poke $d059, bkp_d059&
  poke $d05e, bkp_d05e&

  key on

  end


'---------
.clrscreen
'---------
  edma OP_FILL, WIDTH * 50, 32, $40800
  edma OP_FILL, WIDTH * 50, 0, $ff80000

  ' clear screen
  for y = 0 to 49
   for x = 0 to 79
     poke $40800 + y * WIDTH + x * 2 + 1, 0
   next x
  next y


  return



'------------
.stage_object
'------------
  if sidx > 0 then begin
    stage_x_offs%(sidx) = stage_x_offs%(sidx-1) + spr_chr_width%(sidx-1) + 1
  bend

  for y = 0 to 49
    ' prepare initial gotox char
    poke $ff80000 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2, %10010000
    wpoke $40800 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2, 80 * 8  ' keep off-screen initially

    ' prepare ending gotox char
    poke $ff80000 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2 + (spr_chr_width%(sidx) + 1) * 2, %10010000
    wpoke $40800 + y * WIDTH + 160 + stage_x_offs%(sidx) * 2 + (spr_chr_width%(sidx) + 1) * 2, 80 * 8
  next y

  ' gosub draw_object

  return


'---------
.main_game
'---------
  score = 0 : health = 10
  gosub draw_score
  gosub draw_energy_bars

  gosub init_level

  k = fre(1)  ' do garbage collection after any string work

  do while game_over_flag = 0
    ' gosub draw_coords

    gosub user_input

    gosub baddie_logic

    gosub draw_objects

    gosub animate_objects

    gosub check_box_collisions

    gosub game_logic
  loop

  return


'----------
.game_logic
'----------
  if spr_collide&(S_GIRL, S_WOLF1) <> 0 then gosub handle_wolf_collision

  if spr_collide&(S_GIRL, S_KEY) <> 0 then gosub handle_key_collision

  if spr_collide&(S_GIRL, S_BANANA) <> 0 then gosub handle_banana_collision

  if spr_collide&(S_GIRL, S_WBOTTLE) <> 0 then gosub handle_wbottle_collision

  if spr_collide&(S_GIRL, S_CARPET) <> 0 then gosub handle_carpet_collision

  if colour_cycle_flag = 1 then gosub handle_colour_cycling

  return


'---------------------
.handle_colour_cycling
'---------------------
  bank 0
  sys $7f21, 16
  bank 128

  if (ti - cycle_start) = 10 then begin
    colour_cycle_flag = 0
    gosub restore_default_colours
  bend
  return


'-----------------------
.handle_carpet_collision
'-----------------------
  colour_cycle_flag = 1
  cycle_start = ti
  return


'------------------------
.handle_wbottle_collision
'------------------------
  score = score + 400
  health = health + 4

  gosub draw_score
  gosub draw_energy_bars

  k = fre(1)  ' do garbage collection after any string work

  sidx = S_WBOTTLE
  gosub spawn_item

  return


'-----------------------
.handle_banana_collision
'-----------------------
  score = score + 200
  health = health + 2

  gosub draw_score
  gosub draw_energy_bars

  k = fre(1)  ' do garbage collection after any string work

  sidx = S_BANANA
  gosub spawn_item
  return


'--------------------
.handle_key_collision
'--------------------
  score = score + 100
  gosub draw_score
  k = fre(1)  ' do garbage collection after any string work

  sidx = S_KEY
  gosub spawn_item
  return


'---------------------
.handle_wolf_collision
'---------------------
  health = health - 1
  gosub draw_energy_bars
  k = fre(1)

  if health = 0 then begin
    colour_cycle_flag = 0
    gosub restore_default_colours

    tclr = 2 : a$ = "You died a gruesome death!"
    pane_width% = len(a$) + 4
    pane_height% = 5
    gosub show_centred_pane

    sleep 2

    ' clear keyboard buffer
    for k = 0 to 16
      get a$
    next k
            
    game_over_flag = 1

  bend
  return


'-----------------
.show_centred_pane
'-----------------
  pane_x% = (80 - pane_width%) / 2
  pane_y% = (50 - pane_height%) / 2

  gosub draw_pane

  tclr = 0 : tx = pane_x% + 2 : ty = pane_y% + 2
  gosub draw_text

  return


'---------
.draw_pane
'---------
  bank 0
  poke $7e10, pane_x%
  poke $7e11, pane_y%
  poke $7e12, pane_width%
  poke $7e13, pane_height%
^^  sys to $7f09, i0
  bank 128
  return


'---------
.hide_pane
'---------
  bank 0
  poke $7e10, pane_x%
  poke $7e11, pane_y%
  poke $7e12, pane_width%
  poke $7e13, pane_height%
^^  sys to $7f0c, i0
  bank 128
  return


'----------
.init_level
'----------
  spr_ox%(S_GIRL) = 30
  spr_oy%(S_GIRL) = 220

  wolf_x(0) = 600
  wolf_y(0) = 220

  spr_ox%(S_WOLF1) = wolf_x(0)
  spr_oy%(S_WOLF1) = wolf_y(0)

  wolf_vx(0) = 0
  wolf_vy(0) = 0

  game_over_flag = 0
  colour_cycle_flag = 0

  sidx = S_KEY
  gosub spawn_item

  sidx = S_BANANA
  gosub spawn_item

  sidx = S_WBOTTLE
  gosub spawn_item

  sidx = S_CARPET
  gosub spawn_item

  return


'----------
.spawn_item
'----------
  spr_ox%(sidx) = rnd(1)*600
  spr_oy%(sidx) = 32 +rnd(1)*340

  gosub check_box_collisions
  if spr_collide&(S_GIRL, sidx) <> 0 then goto spawn_item

  return


'------------
.baddie_logic
'------------

  dx = spr_ox%(S_GIRL) - spr_ox%(S_WOLF1)
  dy = spr_oy%(S_GIRL) - spr_oy%(S_WOLF1)

  radius = sqr(dx*dx + dy*dy)

  if dx <> 0 then dx = .1 * dx / radius ' : else wolf_vx(0) = 0
  if dy <> 0 then dy = .1 * dy / radius ' : else wolf_vy(0) = 0

  wolf_vx(0) = wolf_vx(0) + dx
  if wolf_vx(0) > 5 then wolf_vx(0) = 5
  if wolf_vx(0) < -5 then wolf_vx(0) = -5
  wolf_vy(0) = wolf_vy(0) + dy
  if wolf_vy(0) > 5 then wolf_vy(0) = 5
  if wolf_vy(0) < -5 then wolf_vy(0) = -5

  wolf_x(0) = wolf_x(0) + wolf_vx(0)
  wolf_y(0) = wolf_y(0) + wolf_vy(0)

  if wolf_x(0) < 0 then wolf_x(0) = 0
  if wolf_x(0) > 607 then wolf_x(0) = 607
  if wolf_y(0) < 0 then wolf_y(0) = 0
  if wolf_y(0) > 367 then wolf_y(0) = 367

  spr_ox%(S_WOLF1) = wolf_x(0)
  spr_oy%(S_WOLF1) = wolf_y(0)

  return


'----------
.user_input
'----------
  get a$
  
  if a$ = KEY_LEFT then begin
    spr_ox%(S_GIRL) = spr_ox%(S_GIRL) - 3
    if spr_ox%(S_GIRL) < 0 then spr_ox%(S_GIRL) = 0
  bend

  if a$ = KEY_RIGHT then begin
    spr_ox%(S_GIRL) = spr_ox%(S_GIRL) + 3
    if spr_ox%(S_GIRL) > 607 then spr_ox%(S_GIRL) = 607
  bend

  if a$ = KEY_UP then begin
    spr_oy%(S_GIRL) = spr_oy%(S_GIRL) - 3
    if spr_oy%(S_GIRL) < 16 then spr_oy%(S_GIRL) = 16
  bend

  if a$ = KEY_DOWN then begin
    spr_oy%(S_GIRL) = spr_oy%(S_GIRL) + 3
    if spr_oy%(S_GIRL) > 367 then spr_oy%(S_GIRL) = 367
  bend

  if a$ = KEY_MEGA_Q then goto cleanup

  return


'----------
.draw_score
'----------
  tx = 0 : ty = 0 : tclr = 0
  a$ = "SCORE: " + str$(score)
  gosub draw_text
  return


'----------------
.draw_energy_bars
'----------------
  tx = 0 : ty = 1 : tclr = 0
  a$ = "HEALTH: "
  gosub draw_text

  tx = 8 : tclr = 5
  a$ = KEY_REV_ON

  if health > 0 then begin
    for k = 0 to health - 1
      a$ = a$ + " "
    next k
  bend

  a$ = a$ + KEY_REV_OFF + " "

  gosub draw_text

  return


'---------------
.animate_objects
'---------------
  anim_tmr = mod (anim_tmr + 1, 8)

  if anim_tmr = 0 then begin
    for k = 0 to 3
      fidx = spr_fidx&(S_WOLF1 + k)
      fidx = mod(fidx + 1, 2)
      spr_fidx&(S_WOLF1 + k) = fidx
      tmp = char_idx%(spr_frames&(S_WOLF1 + k, fidx))
      spr_char_idx%(S_WOLF1 + k) = tmp
    next k

    fidx = spr_fidx&(S_GIRL)
    fidx = mod(fidx + 1, 2)
    spr_fidx&(S_GIRL) = fidx
    tmp = char_idx%(spr_frames&(S_GIRL, fidx))
    spr_char_idx%(S_GIRL) = tmp
  bend

  return


'-----------
.draw_coords
'-----------
  tclr = 0 : tx = 5 : ty = 4
  a$ = "sprite index =" + str$(sidx)
  gosub draw_text
  tclr = 0 : tx = 5 : ty = 5
  a$ = "x =" + str$(spr_ox%(sidx)) + ", y =" + str$(spr_oy%(sidx)) + "     "
  
  ' force garbage collection now, so that it doesn't trigger
  ' during sys call and crash (due to my CLRPTR=$20 being a far-ptr in basic)
  k = fre(1)

  gosub draw_text
  return


'------------
.draw_objects
'------------
  vsync 250
'  border 3
  bank 0
^^  sys to $7f00, i0
  bank 128
  return


'--------------------
.check_box_collisions
'--------------------
  ' border 5
  bank 0
  sys $7f1e
  bank 128
  ' border 0

  return


'---------
.draw_text
'---------
  bank 0
  poke $7e0d, tx
  poke $7e0e, ty
  poke $7e0f, tclr
  sys $7f03, 0, aptr_lo, aptr_hi
  bank 128

  return

  ' the above works, but occasionally trips up on basic garbage collection


'---------
.load_data
'---------
  char_count = 0

  if len(ln$) > 0 then begin
    dopen #2,(ln$),r,u8
    if ds then tclr = 2 : a$ = "disk error" : gosub draw_text : return

    get#2, frame_count%

    for k = 0 to frame_count% - 1
      get#2, xx : char_type(k) = xx and 255
      get#2, xx : default_slice(k) = xx and 255
      get#2, xx : chr_width%(k) = xx and 255
      get#2, xx : chr_height%(k) = xx and 255
      get#2, xx, yy
      char_idx%(k) = (xx and 255) + (yy and 255) * 256
      get#2, xx : bb_cnt&(k) = xx and 255
      if bb_cnt&(k) > 0 then begin
        for kk = 0 to bb_cnt&(k) - 1
          get#2, xx, yy : bb_tlx&(k,kk) = xx and 255 : bb_tly&(k,kk) = yy and 255
          get#2, xx, yy : bb_brx&(k,kk) = xx and 255 : bb_bry&(k,kk) = yy and 255
        next kk
      bend

      char_count = char_count + chr_width%(k) * chr_height%(k)
    next k

    ' todo : add animation details here
    get#2, xx : anim_count = xx and 255
    if anim_count > 0 then begin
      for k = 0 to anim_count - 1
        ' load number of frames in anim
        ' load list of frame indices
      next k
    bend

    for k = 0 to char_count * $40
      get#2, xx
      poke char_idx%(0) * $40 + k, xx and 255
    next k

    dclose #2

    if debug_bb = 1 then gosub draw_bounding_boxes

  bend

  return


'-------------------
.draw_bounding_boxes
'-------------------
  for fidx = 0 to frame_count% - 1
    if bb_cnt&(fidx) > 0 then begin
      for k = 0 to bb_cnt&(fidx) - 1

        for cx = bb_tlx&(fidx, k) to bb_brx&(fidx, k)
          cy = bb_tly&(fidx, k)
          gosub plot_pixel
          cy = bb_bry&(fidx, k)
          gosub plot_pixel
        next cx

        for cy = bb_tly&(fidx, k) to bb_bry&(fidx, k)
          cx = bb_tlx&(fidx, k)
          gosub plot_pixel
          cx = bb_brx&(fidx, k)
          gosub plot_pixel
        next cy

      next k
    bend
  next fidx

  return


'----------
.plot_pixel
'----------
  x = mod(cx, 8)
  y = mod(cy, 8)
  xx = int(cx / 8)
  yy = int(cy / 8)
  poke char_idx%(fidx) * $40 + $40 * chr_height%(fidx) * xx + $40 * yy + y * 8 + x, 1

  return


'---------------------
.store_default_colours
'---------------------
  for k = 0 to 31
    default_red&(k) = peek($d100+k)
    default_green&(k) = peek($d200+k)
    default_blue&(k) = peek($d300+k)
  next k

  return


'-----------------------
.restore_default_colours
'-----------------------
  for k = 0 to 31
    poke $d100+k, default_red&(k)
    poke $d200+k, default_green&(k)
    poke $d300+k, default_blue&(k)
  next k

  return
ÿ